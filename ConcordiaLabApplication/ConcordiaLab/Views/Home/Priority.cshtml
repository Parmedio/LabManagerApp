@using ConcordiaLab.ViewModels;
@model IEnumerable<ViewMExperiment>

@{
    ViewData["Title"] = "Priority Dashboard";
    ViewData["Institution"] = "Concordia Lab";
    Layout = "_Layout";
    var selectedScientistId = ViewData["SelectedScientistId"] as int?;
    var selectedViewMode = ViewData["SelectedViewMode"] as string ?? string.Empty;
}

<h1 class="display-5">@ViewData["Title"]</h1>

<div class="d-flex flex-row">
    <div class="d-flex flex-column w-100">
        <h3 class="ms-2 my-3">Your deadlines</h3>
        <div class="d-flex" style="margin: 0px 0px 8px 0px;">
            <h5 class="head-title">Experiment</h5>
            <h5 class="head-assignee">Assignee</h5>
            <div class="segment">
                <svg style="width: 32%; height: 26px;" xmlns="http://www.w3.org/2000/svg" width="16" height="22" fill="currentColor" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M6 2a.5.5 0 0 1 .47.33L10 12.036l1.53-4.208A.5.5 0 0 1 12 7.5h3.5a.5.5 0 0 1 0 1h-3.15l-1.88 5.17a.5.5 0 0 1-.94 0L6 3.964 4.47 8.171A.5.5 0 0 1 4 8.5H.5a.5.5 0 0 1 0-1h3.15l1.88-5.17A.5.5 0 0 1 6 2Z" />
                </svg>
                <svg style="width: 36%; height: 26px;" xmlns="http://www.w3.org/2000/svg" width="16" height="22" fill="currentColor" viewBox="0 0 16 16">
                    <path d="M8 16a2 2 0 0 0 2-2H6a2 2 0 0 0 2 2zM8 1.918l-.797.161A4.002 4.002 0 0 0 4 6c0 .628-.134 2.197-.459 3.742-.16.767-.376 1.566-.663 2.258h10.244c-.287-.692-.502-1.49-.663-2.258C12.134 8.197 12 6.628 12 6a4.002 4.002 0 0 0-3.203-3.92L8 1.917zM14.22 12c.223.447.481.801.78 1H1c.299-.199.557-.553.78-1C2.68 10.2 3 6.88 3 6c0-2.42 1.72-4.44 4.005-4.901a1 1 0 1 1 1.99 0A5.002 5.002 0 0 1 13 6c0 .88.32 4.2 1.22 6z" />
                </svg>
                <svg style="width: 32%; height: 26px;" xmlns="http://www.w3.org/2000/svg" width="16" height="22" fill="currentColor" viewBox="0 0 16 16">
                    <path d="M8 3.5a.5.5 0 0 0-1 0V9a.5.5 0 0 0 .252.434l3.5 2a.5.5 0 0 0 .496-.868L8 8.71V3.5z" />
                    <path d="M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16zm7-8A7 7 0 1 1 1 8a7 7 0 0 1 14 0z" />
                </svg>
                <p class="placeholderz"></p>
            </div>
        </div>
        @foreach (var experiment in Model)
        {
            <div class="d-flex justify-content-between custom-card">
                <h5 class="mt-2 ms-3 experiment-title">@experiment.Title</h5>
                <h6 class="mt-1 card-subtitle text-muted assegnee">
                @{
                    if (experiment.Scientists != null)
                    {
                        var scientistsCount = experiment.Scientists.Count();
                        var scientistsList = string.Join(", ", experiment.Scientists.Select(s => $"{s.UserName}"));

                        if (scientistsCount > 0)
                        {
                            <span>@scientistsList</span>
                        }
                    }
                }
                </h6>
                <div class="segment">
                    <p class="progressz"><b>@experiment.BelongToList</b></p>
                    <p class="priority"><b>@experiment.Priority</b></p>
                    <p class="due-date">@(experiment.DueDate != null ? experiment.DueDate?.ToString("dd ") + experiment.DueDate?.ToString("MMM").Substring(0, 3).ToUpper() : "no date")</p>
                    <a class="btn btn-outline-secondary flex-shrink-1" asp-action="Detail" asp-route-experimentId="@experiment.Id" asp-route-scientistId="@selectedScientistId" asp-route-selectedViewMode="@selectedViewMode">details</a>
                </div>
            </div>
        }
    </div>
</div>

<style>
    .placeholderz {
        width: 74px;
        margin: 0px 20px 0px 0px;
    }
    .head-title {
        width: 32%;
        margin: 0px 0px 0px 24px;
    }

    .head-assignee {
        width: 36%;
    }

    .head-segment {
        width: 32%;
    }

    .experiment-title {
        width: 32%;
        margin: 0px 0px 0px 0px;
        padding: 0px;
    }

    .assegnee {
        width: 36%;
        display: flex;
        align-items: center;
        justify-content: start;
    }

    .custom-card {
        border-radius: 10px;
        border: 1px solid lightgrey;
        box-shadow: 0px 0px 14px lightgrey;
        margin: 0px 5px 10px 5px;
        padding: 0px;
    }
    
    .progressz {
        width: 34%;
        text-align: center;
        border-radius: 4px;
        margin: 6px;
    }

    .priority {
        width: 33%;
        text-align: center;
        border-radius: 4px;
        margin: 6px;
    }

    .due-date {
        background-color: lightgrey;
        width: 33%;
        text-align: center;
        border-radius: 4px;
        margin: 6px;
    }

    .segment {
        width: 32%;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 4px;
    }

    .low {
        color: gray;
        background-color: whitesmoke;
    }

    .medium {
        color: darkgoldenrod;
        background-color: khaki;
    }

    .high { 
        color: darkred;
        background-color: mistyrose;
    }

    .to-do {
        background: rgba(207,207,207,0.6);
    }

    .in-progress {
        background: rgba(132,215,255,0.6);
    }

    .completed {
        background: rgba(124,255,132,0.6);
    }
</style>

<script>
    var elements = document.getElementsByClassName('priority');
    var i = elements.length - 1;

    while (i >= 0) {
        var element = elements[i];
        var priority = element.innerText.trim();

        if (priority === 'Low') {
            element.classList.add('low');
        } else if (priority === 'Medium') {
            element.classList.add('medium');
        } else if (priority === 'High') {
            element.classList.add('high');
        }

        i--;
    }

    var pelements = document.getElementsByClassName('progressz');
    var z = pelements.length - 1;

    while (z >= 0) {
        var pelement = pelements[z];
        var priority = pelement.innerText.trim();

        if (priority === 'to do') {
            pelement.classList.add('to-do');
        } else if (priority === 'in progress') {
            pelement.classList.add('in-progress');
        } else if (priority === 'completed') {
            pelement.classList.add('completed');
        }

        z--;
    }
</script>